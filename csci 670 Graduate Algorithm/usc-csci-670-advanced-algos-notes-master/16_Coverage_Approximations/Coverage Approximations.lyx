#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{tikz}
\usepackage{tikz-qtree}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
algolyx
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Coverage Approximations
\end_layout

\begin_layout Section
Set Cover Approximation
\end_layout

\begin_layout Standard
SET COVER: Given a universe 
\begin_inset Formula $U$
\end_inset

 of 
\begin_inset Formula $n$
\end_inset

 elements and subsets 
\begin_inset Formula $S_{1},\dots,S_{m}\subseteq U$
\end_inset

 with costs 
\begin_inset Formula $c_{j}$
\end_inset

, find a 
\begin_inset Formula $T\subseteq\{1,\dots,m\}$
\end_inset

 with 
\begin_inset Formula $\bigcup_{j\in T}S_{j}=U$
\end_inset

 such that 
\begin_inset Formula $\sum_{j\in T}c_{j}$
\end_inset

 is minimized.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Algorithm (num)
* Start with 
\begin_inset Formula $R=U,T=\emptyset$
\end_inset


\end_layout

\begin_layout Algorithm (num)
while 
\begin_inset Formula $R\neq\emptyset$
\end_inset


\end_layout

\begin_deeper
\begin_layout Algorithm (num)
* Let 
\begin_inset Formula $S_{j}$
\end_inset

 be a set minimizing 
\begin_inset Formula $\frac{c_{j}}{S_{j}\cap R}$
\end_inset

 (i.e., 
\begin_inset Formula $\frac{\text{cost}}{\text{benefit}}$
\end_inset

)
\end_layout

\begin_layout Algorithm (num)
* Set 
\begin_inset Formula $R=R\setminus S_{j},T=T\cup S_{j}$
\end_inset


\end_layout

\end_deeper
\begin_layout Algorithm (num)
endwhile
\end_layout

\begin_layout Algorithm (num)
* Return 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Greedy Approximation Algorithm for Set Cover
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Theorem
This is an 
\begin_inset Formula $\mathcal{O}(\ln n)$
\end_inset

 approximation.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $T^{*}$
\end_inset

 be the optimal solution and 
\begin_inset Formula $T$
\end_inset

 our final solution.
 Thus, 
\begin_inset Formula $OPT=C(T^{*})=\sum_{j\in T^{*}}c_{j}$
\end_inset

, and 
\begin_inset Formula $C(T)=\sum_{j\in T}c_{j}$
\end_inset

.
\end_layout

\begin_layout Proof
Define element costs as follows: suppose we cover element 
\begin_inset Formula $u$
\end_inset

 for the first time with a set 
\begin_inset Formula $S_{j}$
\end_inset

, and at that iteration, 
\begin_inset Formula $|S_{j}\cap R|=k$
\end_inset

.
 Then, the price 
\begin_inset Formula $p(u)=\frac{c_{j}}{k}$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
C(T)=\sum_{j\in T}c_{j}=\sum_{j\in T}\frac{c_{j}}{k}k
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
=\sum_{j\in T}\sum_{\text{newly covered elements \ensuremath{u} by }S_{j}}p(u)
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
=\sum_{u\in U}p(u)
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Lemma
For all sets 
\begin_inset Formula $S_{j}$
\end_inset

, 
\begin_inset Formula $c_{j}H_{|S_{j}|}\geq\sum_{u\in S_{j}}p(u)$
\end_inset

 where 
\begin_inset Formula $H_{n}$
\end_inset

 is the 
\begin_inset Formula $n^{th}$
\end_inset

 harmonic number.
\end_layout

\begin_layout Proof
Consider some set 
\begin_inset Formula $S_{j}=\{i_{1},i_{2},\dots i_{l}\}$
\end_inset

 with 
\begin_inset Formula $l=|S_{j}|$
\end_inset

 such that our algorithm covers the elements in the order 
\begin_inset Formula $i_{1},i_{2},\dots,i_{l}$
\end_inset

.
 At the moment the algorithm covered 
\begin_inset Formula $i_{t}$
\end_inset

 for the first time, none of 
\begin_inset Formula $i_{t},i_{t+1},\dots,i_{l}$
\end_inset

 were already covered.
 
\begin_inset Formula $S_{j}$
\end_inset

 was clearly an option to cover all of them and had cost effectiveness 
\begin_inset Formula $\leq\frac{c_{j}}{l+1-t}$
\end_inset

.
 The greedy algorithm picked the most cost-effective set, so it achieved
 cost-effectiveness 
\begin_inset Formula $\leq\frac{c_{j}}{l+1-t}$
\end_inset

 (i.e., the algorithm could have picked an even cheaper set than 
\begin_inset Formula $S_{j}$
\end_inset

, but not a more expensive one).
 Thus, 
\begin_inset Formula $p(i_{t})\leq\frac{c_{j}}{l+1-t}$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
\sum_{S_{j}}p(u)=\sum_{t=1}^{l}p(i_{t})
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
\leq\sum_{t=1}^{l}\frac{c_{j}}{l+1-t}
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
=c_{j}\sum_{t=1}^{l}\frac{1}{l+1-t}
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
=c_{j}\sum_{t=1}^{l}\frac{1}{t}
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
=c_{j}H_{l}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Proof
Returning to the proof:
\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
OPT=\sum_{j\in T^{*}}c_{j}
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
\geq\sum_{j\in T^{*}}\frac{1}{H_{|S_{j}|}}\sum_{u\in S_{j}}p(u)\text{ by the lemma}
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
\geq\frac{1}{\max_{j\in T^{*}}H_{|S_{j}|}}\sum_{j\in T^{*}}\sum_{u\in S_{j}}p(u)
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
\geq\frac{1}{\max_{j\in T^{*}}H_{|S_{j}|}}\sum_{u\in U}p(u)\text{ because \ensuremath{T^{*}}is a cover}
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
\geq\frac{1}{\max_{j\in T^{*}}H_{|S_{j}|}}C(T)
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $|S_{j}|\leq n$
\end_inset

, so this is at most an 
\begin_inset Formula $H_{n}$
\end_inset

 approximation.
 Since 
\begin_inset Formula $H_{n}\approx\ln n$
\end_inset

, we have an 
\begin_inset Formula $\mathcal{O}(\ln n)$
\end_inset

 approximation.
\end_layout

\begin_layout Theorem
Unless 
\series bold
P
\series default
=
\series bold
NP
\series default
, there is no polytime 
\begin_inset Formula $\mathcal{O}((1-\mathcal{E})\ln n)$
\end_inset

 SET COVER approximation algorithm for any 
\begin_inset Formula $\mathcal{E}>0$
\end_inset

.
\end_layout

\begin_layout Standard
This is a really long and difficult proof (it would take a semester to teach)
 from the 1990s according to the probabalistically checkable proofs (PCP)
 theorem.
\end_layout

\begin_layout Section
Maximum Coverage Approximation
\end_layout

\begin_layout Standard
MAXIMUM COVERAGE: Given a universe 
\begin_inset Formula $U$
\end_inset

 where each element has a value 
\begin_inset Formula $v(u)$
\end_inset

, subsets 
\begin_inset Formula $S_{1},\dots,S_{m}\subseteq U$
\end_inset

, and an integer 
\begin_inset Formula $k$
\end_inset

, find a 
\begin_inset Formula $T\subseteq\{1,\dots,m\}$
\end_inset

 with 
\begin_inset Formula $|T|\leq k$
\end_inset

 maximizing 
\begin_inset Formula $\sum_{u\in\bigcup_{j\in T}s_{j}}v(u)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Algorithm (num)
* Start with 
\begin_inset Formula $R=U,T=\emptyset$
\end_inset


\end_layout

\begin_layout Algorithm (num)
for 
\begin_inset Formula $k$
\end_inset

 iterations 
\begin_inset Formula $t=1,2,\dots,k$
\end_inset


\end_layout

\begin_deeper
\begin_layout Algorithm (num)
* Let 
\begin_inset Formula $S_{j_{t}}$
\end_inset

 be a set minimizing 
\begin_inset Formula $\sum_{u\in S_{j_{t}}\cap R}v(u)$
\end_inset

.
\end_layout

\begin_layout Algorithm (num)
* Choose 
\begin_inset Formula $S_{j_{t}}$
\end_inset

 and set 
\begin_inset Formula $R=R\setminus S_{j_{t}},T=T\cup\{j_{t}\}$
\end_inset


\end_layout

\end_deeper
\begin_layout Algorithm (num)
endfor
\end_layout

\begin_layout Algorithm (num)
* Return 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Greedy Approximation Algorithm for Maximum Coverage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Theorem
This is a 
\begin_inset Formula $(1-\frac{1}{e})$
\end_inset

 approximation.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $T^{*}$
\end_inset

 be the optimal solution and 
\begin_inset Formula $T_{t}$
\end_inset

 our solution after 
\begin_inset Formula $t$
\end_inset

 rounds.
 Thus, 
\begin_inset Formula $OPT=C(T^{*})=\sum_{u\in\bigcup_{j\in T^{*}}s_{j}}v(u)$
\end_inset

, 
\begin_inset Formula $U_{t}=\bigcup_{j\in T_{t}}S_{j}$
\end_inset

, and 
\begin_inset Formula $V_{t}=\sum_{u\in U_{t}}v(u)$
\end_inset

.
\end_layout

\begin_layout Proof
Two important observations:
\end_layout

\begin_layout Proof
(1).
 Monotonicity: by adding all of 
\begin_inset Formula $T^{*}$
\end_inset

 to 
\begin_inset Formula $T_{t}$
\end_inset

, we would get a solution of value 
\begin_inset Formula $\geq OPT$
\end_inset

 (i.e., increase our value by at least 
\begin_inset Formula $OPT-V_{t}$
\end_inset

).
\end_layout

\begin_layout Proof
(2).
 Submodularity/diminishing returns: by adding the best set 
\begin_inset Formula $S_{j}$
\end_inset

 for 
\begin_inset Formula $j\in T^{*}$
\end_inset

 to 
\begin_inset Formula $T_{t}$
\end_inset

, we increase the value by at least 
\begin_inset Formula $\frac{1}{k}(OPT-V_{t})$
\end_inset

 because 
\begin_inset Formula $|T^{*}|\leq k$
\end_inset

.
\end_layout

\begin_layout Proof
Our greedy algorithm maximizes 
\begin_inset Formula $V_{t+1}-V_{t}$
\end_inset

, so:
\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
V_{t+1}-V_{t}\geq\frac{1}{k}(OPT-V_{t})
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
V_{t+1}\geq(1-\frac{1}{k})v_{t}+\frac{1}{k}OPT
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Claim
\begin_inset Formula $V_{t}\geq(1-(1-\frac{1}{k})^{t})OPT$
\end_inset


\end_layout

\begin_layout Proof
By induction.
\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
V_{0}=0
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
V_{t+1}\geq(1-\frac{1}{k})V_{t}+\frac{1}{k}OPT
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
\geq^{IH}(1-\frac{1}{k})(1-(1-\frac{1}{k})^{t})OPT+\frac{1}{k}OPT
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
=((1-\frac{1}{k})-(1-\frac{1}{k})^{t})OPT+\frac{1}{k}OPT
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
=(1-(1-\frac{1}{k})^{t+1})OPT
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Proof
After 
\begin_inset Formula $k$
\end_inset

 iterations:
\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
V_{k}\geq(1-(1-\frac{1}{k})^{k})OPT
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
\geq(1-\frac{1}{e})OPT
\]

\end_inset


\end_layout

\begin_layout Theorem
Unless 
\series bold
P=NP
\series default
, there is no polytime 
\begin_inset Formula $(1-\frac{1}{e}-\mathcal{E})$
\end_inset

 MAXIMUM COVERAGE approximation algorithm for any 
\begin_inset Formula $\mathcal{E}>0$
\end_inset

.
\end_layout

\end_body
\end_document
