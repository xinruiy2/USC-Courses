#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{tikz}
\usepackage{tikz-qtree}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
algolyx
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Intro to Complexity Theory
\end_layout

\begin_layout Section
More Uses of Dynamic Programming
\end_layout

\begin_layout Subsection
Matrix Multiplication
\end_layout

\begin_layout Standard
Dynamic programming can drastically speed up the multiplication of 
\begin_inset Formula $k\geq3$
\end_inset

 matrices.
 We want to compute 
\begin_inset Formula $A_{1}A_{2}\dots A_{k}$
\end_inset

, where 
\begin_inset Formula $A_{i}\in\mathbb{R}^{m_{i}\times n_{i}}\text{ }\forall i$
\end_inset

.
 Order matters during multiplication! For example, take 
\begin_inset Formula $A_{1}\in\mathbb{R}^{1\times n},A_{2}\in\mathbb{R}^{n\times1},A_{3}\in\mathbb{R}^{1\times n}$
\end_inset

.
 If we multiply as 
\begin_inset Formula $(A_{1}A_{2})A_{3}$
\end_inset

, it will take 
\begin_inset Formula $2n$
\end_inset

 total computations, but if we multiply as 
\begin_inset Formula $A_{1}(A_{2}A_{3})$
\end_inset

, it will take a whopping 
\begin_inset Formula $2n^{2}$
\end_inset

 instead.
\end_layout

\begin_layout Standard
Our goal is to compute the optimal evaluation order for a sequence of matrices
 
\begin_inset Formula $A_{i}A_{i+1}\dots A_{j}$
\end_inset

.
 We know that there is some final multiplication 
\begin_inset Formula $(A_{i}\dots A_{k})(A_{k+1}\dots A_{j})$
\end_inset

 where each of the terms is likewise computed optimally.
 We say 
\begin_inset Formula $OPT(i,j)$
\end_inset

 is the optimum cost to compute the sequence, and for each computation,
 we solve the terms optimally and spend time to compute the resultant matrix.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
OPT(i,j)=\min_{i\leq k\leq j-1}(OPT(i,k)+OPT(k+1,j)+n_{i}m_{k}m_{j}\text{ with }OPT(i,i)=0
\]

\end_inset


\end_layout

\begin_layout Standard
This can be implemented in a bottom-up nested loop, where the first loop
 runs to 
\begin_inset Formula $j-i$
\end_inset

 and the second to 
\begin_inset Formula $i$
\end_inset

.
 In other words, we compute the optimum way to compute the product of one
 matrix, then two, then three, and so on, eventually combining our previous
 optima for 
\begin_inset Formula $k$
\end_inset

 matrices.
\end_layout

\begin_layout Subsection
Sequence Alignment
\end_layout

\begin_layout Standard
Sequence alignment deals with strings that may have been changed via insertion,
 omission, or replacement.
 This shows up in a variety of applications, from spellchecking to DNA analysis.
 To compute sequence alignment, we inset spaces into 
\begin_inset Formula $s$
\end_inset

 or 
\begin_inset Formula $t$
\end_inset

 until the lengths are equal, then write them on top of each other.
 Then, the alignment cost is the sum of 
\begin_inset Formula $\alpha$
\end_inset

 for each mismatched letter and 
\begin_inset Formula $\beta$
\end_inset

 for each letter matched with a space.
 We can also define the edit distance of strings 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $t$
\end_inset

 as the minimum cost of any sequence of operations transforming 
\begin_inset Formula $s$
\end_inset

 into 
\begin_inset Formula $t$
\end_inset

, where 
\begin_inset Formula $\alpha$
\end_inset

 is the cost for replacing a character and 
\begin_inset Formula $\beta$
\end_inset

 is the cost for inserting or removing a character.
\end_layout

\begin_layout Standard
Given an 
\begin_inset Formula $n$
\end_inset

-character string 
\begin_inset Formula $s$
\end_inset

 and an 
\begin_inset Formula $m$
\end_inset

-character string 
\begin_inset Formula $t$
\end_inset

, compute the optimal alignment cost from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $t$
\end_inset

.
 We say 
\begin_inset Formula $OPT(i,j)$
\end_inset

 is the minimum alignment cost of 
\begin_inset Formula $s[1\dots i]$
\end_inset

 and 
\begin_inset Formula $t[1\dots j]$
\end_inset

.
 It must be the minimum of three terms:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\beta+OPT(i-1,j)\text{: matched last letter in \ensuremath{s} against a space}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\beta+OPT(i,j-1)\text{: matched last letter in \ensuremath{t} against a space}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
OPT(i-1,j-1)+\alpha*(s[i]\neq t[j])\text{: matched \ensuremath{s} and \ensuremath{t} on top of each other and paid \ensuremath{\alpha} if they didn't match up}
\]

\end_inset


\end_layout

\begin_layout Standard
With base cases:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
OPT(i,0)=i\beta\text{ }\forall i
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
OPT(0,j)=j\beta\text{ }\forall j
\]

\end_inset


\end_layout

\begin_layout Section
Complexity Theory
\end_layout

\begin_layout Subsection
Reductions
\end_layout

\begin_layout Standard
Say that we have encountered some problem in research which we're pretty
 sure cannot be solved by a polynomial-time algorithm.
 
\series bold
NP-completeness
\series default
 deals with relating such a problem to known difficult problems, by using
 methodologies for showing that some (new) problem is at least as hard as
 lots of old problems that nobody knows how to solve efficiently.
 The key tool here is the 
\series bold
reduction
\series default
, also called the transformation, from an old problem 
\begin_inset Formula $X$
\end_inset

 to a new problem 
\begin_inset Formula $Y$
\end_inset

.
 The reduction shows that there exists an algorithm that will solve 
\begin_inset Formula $X$
\end_inset

 if it could also solve 
\begin_inset Formula $Y$
\end_inset

.
 In other words, it transforms 
\begin_inset Formula $Y$
\end_inset

 into 
\begin_inset Formula $X$
\end_inset

 in polynomial time.
 We write 
\begin_inset Formula $X\leq pY$
\end_inset

 if there exists a reduction from 
\begin_inset Formula $X$
\end_inset

 to 
\begin_inset Formula $Y$
\end_inset

.
\end_layout

\begin_layout Standard
Assuming 
\begin_inset Formula $X\leq pY$
\end_inset

:
\end_layout

\begin_layout Itemize
If 
\begin_inset Formula $Y$
\end_inset

 is solvable in polynomial time, so is 
\begin_inset Formula $X$
\end_inset

.
\end_layout

\begin_layout Itemize
If 
\begin_inset Formula $X$
\end_inset

 cannot be solved in polynomial time, neither can 
\begin_inset Formula $Y$
\end_inset

.
\end_layout

\begin_layout Subsection
Formalization
\end_layout

\begin_layout Standard
We define a 
\series bold
problem
\series default
 
\begin_inset Formula $X$
\end_inset

 as a set of strings.
\end_layout

\begin_layout Itemize
Strings 
\begin_inset Formula $s\in X$
\end_inset

 called 
\begin_inset Quotes eld
\end_inset

Yes
\begin_inset Quotes erd
\end_inset

 instances
\end_layout

\begin_layout Itemize
Strings 
\begin_inset Formula $s\notin X$
\end_inset

 called 
\begin_inset Quotes eld
\end_inset

No
\begin_inset Quotes erd
\end_inset

 instances
\end_layout

\begin_layout Standard
For example, the MST problem is the set of all strings encoding a graph
 
\begin_inset Formula $\mathcal{G}$
\end_inset

 with edge costs 
\begin_inset Formula $c_{e}$
\end_inset

 and target cost 
\begin_inset Formula $C$
\end_inset

 such that 
\begin_inset Formula $\mathcal{G}$
\end_inset

 has a spanning tree of cost 
\begin_inset Formula $\leq C$
\end_inset

.
\end_layout

\begin_layout Standard
An 
\series bold
algorithm
\series default
 
\begin_inset Formula $A$
\end_inset

 
\series bold
solves
\series default
 
\begin_inset Formula $X$
\end_inset

 when 
\begin_inset Formula $A(x)=$
\end_inset

 
\begin_inset Quotes eld
\end_inset

Yes
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\iff x\in X$
\end_inset

.
 In other words, the algorithm only answers 
\begin_inset Quotes eld
\end_inset

Yes
\begin_inset Quotes erd
\end_inset

 if the answer was in fact 
\begin_inset Quotes eld
\end_inset

Yes
\begin_inset Quotes erd
\end_inset

, and the algorithm only answers 
\begin_inset Quotes eld
\end_inset

No
\begin_inset Quotes erd
\end_inset

 if the answer was in fact 
\begin_inset Quotes eld
\end_inset

No
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The strategy of decomposing optimization problems like 
\begin_inset Quotes eld
\end_inset

Find the MST
\begin_inset Quotes erd
\end_inset

 to decision problems like 
\begin_inset Quotes eld
\end_inset

Does an MST exist with cost 
\begin_inset Formula $\leq C$
\end_inset


\begin_inset Quotes erd
\end_inset

 is beneficial for formalization.
 If we can solve the optimization problem, we can use it to answer the decision
 problem, so optimization is at least as hard as decision.
 Furthermore, if we can solve the decision problem, we can binary search
 to find the optimum cost, and in many (but not all) cases we can create
 different instances that allow us to actually solve the optimization problem.
 In many cases, optimization and decision are equivalent, but decision is
 easier to formalize and usually easier to solve.
\end_layout

\end_body
\end_document
